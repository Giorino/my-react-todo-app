{"version":3,"sources":["components/Content.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["Content","useState","todo","setTodo","input","setinput","counter","setCounter","removeTodo","splice","className","type","value","onChange","a","target","placeholder","onClick","text","id","map","Header","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uSA4CeA,MAzCf,WACE,MAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAA0BF,mBAAS,IAAnC,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAA8BJ,mBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KAOMC,EAAa,WACjBL,EAAQD,EAAKO,OAAOH,KAGtB,OACE,gCACE,sBAAKI,UAAU,YAAf,UACE,uBACEC,KAAK,OACLC,MAAOR,EACPS,SAAU,SAACC,GAAD,OAAOT,EAASS,EAAEC,OAAOH,QACnCI,YAAY,aAEd,wBAAQC,QAlBE,WACdV,EAAWD,EAAU,GACrBD,EAAS,IACTF,GAAQ,SAACD,GAAD,OAAW,CAAEgB,KAAMd,EAAOe,GAAIb,IAA9B,mBAA4CJ,QAehD,oBAEF,qBAAKQ,UAAU,cAAf,SACE,6BACGR,EAAKkB,KAAI,gBAAGF,EAAH,EAAGA,KAAMC,EAAT,EAASA,GAAT,OACR,qBAAaT,UAAU,YAAvB,UACE,8BACE,8BAAMQ,MAER,wBAAQD,QAAST,EAAjB,iBAJOW,c,MCpBNE,MARf,WACE,OACE,qBAAKX,UAAU,cAAf,SACE,gDCOSY,MATf,WACE,OACE,gCACE,cAAC,EAAD,IACA,cAAC,EAAD,QCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.0010a4fc.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Content.css\";\r\n\r\nfunction Content() {\r\n  const [todo, setTodo] = useState([]);\r\n  const [input, setinput] = useState(\"\");\r\n  const [counter, setCounter] = useState(0);\r\n\r\n  const addTodo = () => {\r\n    setCounter(counter + 1);\r\n    setinput(\"\");\r\n    setTodo((todo) => [{ text: input, id: counter }, ...todo]);\r\n  };\r\n  const removeTodo = () => {\r\n    setTodo(todo.splice(counter));\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"input-div\">\r\n        <input\r\n          type=\"text\"\r\n          value={input}\r\n          onChange={(a) => setinput(a.target.value)}\r\n          placeholder=\"New Todo\"\r\n        />\r\n        <button onClick={addTodo}>Add</button>\r\n      </div>\r\n      <div className=\"content-div\">\r\n        <ul>\r\n          {todo.map(({ text, id }) => (\r\n            <li key={id} className=\"list-item\">\r\n              <div>\r\n                <div>{text}</div>\r\n              </div>\r\n              <button onClick={removeTodo}>X</button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Content;\r\n","import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nfunction Header() {\r\n  return (\r\n    <div className=\"header-text\">\r\n      <span>Todo List</span>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import \"./App.css\";\nimport Content from \"./components/Content\";\nimport Header from \"./components/Header\";\n\nfunction App() {\n  return (\n    <div>\n      <Header />\n      <Content />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}